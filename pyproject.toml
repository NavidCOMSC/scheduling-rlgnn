[tool.poetry]
name = "scheduling-rlgnn"
version = "0.1.0"
description = "GNN architecture models with PyG and deep reinforcement learning training pipeline"
authors = ["Navid Rahimi <amir.navid.rahimi@googlemail.com>"]
readme = "README.md"
license = "MIT"
packages = [{ include = "scheduling_rlgnn", from = "src" }]

[tool.poetry.dependencies]
python = "^3.10"
# Core ML frameworks
torch = "^2.1.0"
torch-geometric = "^2.4.0"
# RLLib and Ray dependencies
ray = { extras = ["rllib", "tune"], version = "^2.8.0" }
# Additional PyG dependencies - modified for compatibility
torch-scatter = { version = "^2.1.2", markers = "platform_machine != 'x86_64'" }
torch-sparse = { version = "^0.6.18", markers = "platform_machine != 'x86_64'" }
torch-cluster = { version = "^1.6.3", markers = "platform_machine != 'x86_64'" }
torch-spline-conv = { version = "^1.2.2", markers = "platform_machine != 'x86_64'" }
# Data handling and utilities
numpy = "^1.24.0"
pandas = "^2.0.0"
networkx = "^3.1"
scikit-learn = "^1.3.0"
# Visualization and monitoring
matplotlib = "^3.7.0"
seaborn = "^0.12.0"
tensorboard = "^2.14.0"
# Configuration and utilities
hydra-core = "^1.3.0"
omegaconf = "^2.3.0"
tqdm = "^4.65.0"
loguru = "^0.7.0"
# Data validation
pydantic = "^2.0.0"

[tool.poetry.group.dev.dependencies]
# Testing
pytest = "^7.4.0"
pytest-cov = "^4.1.0"
pytest-mock = "^3.11.0"
# Code quality
black = "^23.7.0"
isort = "^5.12.0"
flake8 = "^6.0.0"
mypy = "^1.5.0"
pre-commit = "^3.3.0"
# Documentation
sphinx = "^7.1.0"
sphinx-rtd-theme = "^1.3.0"
# Profiling and debugging
line-profiler = "^4.1.0"
memory-profiler = "^0.61.0"

[tool.poetry.group.gpu]
optional = true

[tool.poetry.group.gpu.dependencies]

[tool.poetry.group.jupyter]
optional = true

[tool.poetry.group.jupyter.dependencies]
jupyter = "^1.0.0"
jupyterlab = "^4.0.0"
ipywidgets = "^8.1.0"
notebook = "^7.0.0"

# Modified build-system requirements
[build-system]
requires = ["poetry-core>=1.0.0", "setuptools"]
build-backend = "poetry.core.masonry.api"

[tool.black]
line-length = 79
target-version = ['py310']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 79
known_first_party = ["scheduling_rlgnn"]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]

[tool.coverage.run]
source = ["src"]
omit = ["*/tests/*", "*/test_*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
]
